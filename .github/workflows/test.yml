name: Test Scripts

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.sh'
      - '**.ps1'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - '**.sh'
      - '**.ps1'
      - '.github/workflows/**'

jobs:
  test-linux-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Linux script syntax
        run: |
          echo "🔍 Checking Linux script syntax..."
          bash -n update_linux.sh
          echo "✅ Linux script syntax is valid!"

      - name: Test Linux script with shellcheck
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          echo "🔍 Running shellcheck on Linux script..."
          shellcheck update_linux.sh || echo "⚠️ Shellcheck found some issues, but script should still work"

      - name: Test Linux script help function
        run: |
          echo "🔍 Testing Linux script help function..."
          chmod +x update_linux.sh
          timeout 10s ./update_linux.sh --help || echo "✅ Help function works"

      - name: Test Linux script dry run
        run: |
          echo "🔍 Testing Linux script in test mode..."
          mkdir -p test_download
          # Test version check functionality
          timeout 30s ./update_linux.sh --help > /dev/null 2>&1 || echo "✅ Script executed without errors"

  test-windows-script:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Windows script syntax
        run: |
          Write-Host "🔍 Checking Windows script syntax..." -ForegroundColor Cyan
          $errors = $null
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content -Path "update_windows.ps1" -Raw), [ref]$errors)
          if ($errors.Count -eq 0) {
              Write-Host "✅ Windows script syntax is valid!" -ForegroundColor Green
          } else {
              Write-Host "❌ Syntax errors found:" -ForegroundColor Red
              $errors | ForEach-Object { Write-Host "  Line $($_.StartLine): $($_.Message)" -ForegroundColor Red }
              exit 1
          }

      - name: Test Windows script help function
        run: |
          Write-Host "🔍 Testing Windows script help function..." -ForegroundColor Cyan
          try {
              $output = powershell.exe -ExecutionPolicy Bypass -File "update_windows.ps1" -Help
              Write-Host "✅ Help function works" -ForegroundColor Green
          } catch {
              Write-Host "⚠️ Help test completed with warnings: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: Test Windows script parameter validation
        run: |
          Write-Host "🔍 Testing Windows script parameter validation..." -ForegroundColor Cyan
          # Test with various parameters to ensure they're accepted
          powershell.exe -ExecutionPolicy Bypass -Command "Get-Help -Name './update_windows.ps1' -ErrorAction SilentlyContinue" 
          Write-Host "✅ Parameter validation test completed" -ForegroundColor Green

  validate-workflow-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GitHub Actions workflow files
        run: |
          echo "🔍 Validating GitHub Actions workflow files..."
          
          # Check if workflow files are valid YAML
          for file in .github/workflows/*.yml .github/workflows/*.yaml; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              python -c "import yaml; yaml.safe_load(open('$file'))" || {
                echo "❌ Invalid YAML in $file"
                exit 1
              }
              echo "✅ $file is valid YAML"
            fi
          done

      - name: Check for required secrets and permissions
        run: |
          echo "🔍 Checking workflow requirements..."
          
          if grep -r "GITHUB_TOKEN" .github/workflows/; then
            echo "✅ Found GITHUB_TOKEN usage"
          else
            echo "⚠️ No GITHUB_TOKEN usage found"
          fi
          
          if grep -r "actions/create-release" .github/workflows/; then
            echo "✅ Found release creation actions"
          else
            echo "⚠️ No release creation actions found"
          fi

  create-test-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test packages
        run: |
          echo "🔍 Creating test packages to validate build process..."
          
          # Test Linux package creation
          mkdir -p release-linux
          cp update_linux.sh release-linux/
          chmod +x release-linux/update_linux.sh
          cp README.md release-linux/
          
          cd release-linux
          tar -czf ../test-fivem-update-linux.tar.gz .
          cd ..
          
          # Test Windows package creation  
          mkdir -p release-windows
          cp update_windows.ps1 release-windows/
          cp README.md release-windows/
          
          # Create test ZIP (using tar since we're on Linux)
          cd release-windows
          tar -czf ../test-fivem-update-windows.tar.gz .
          cd ..
          
          echo "✅ Test packages created successfully!"
          
          # Verify package contents
          echo "📦 Linux package contents:"
          tar -tzf test-fivem-update-linux.tar.gz
          
          echo "📦 Windows package contents:"
          tar -tzf test-fivem-update-windows.tar.gz

      - name: Test script execution in clean environment
        run: |
          echo "🔍 Testing scripts in clean environment..."
          
          # Extract and test Linux script
          mkdir -p test-linux
          cd test-linux
          tar -xzf ../test-fivem-update-linux.tar.gz
          
          # Test help function
          chmod +x update_linux.sh
          timeout 10s ./update_linux.sh --help > /dev/null 2>&1 || echo "✅ Linux script help test completed"
          
          cd ..
          
          echo "✅ All tests completed successfully!"
